
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

ratings = pd.read_csv('ml-100k/u.data', sep='\t', names=['user_id', 'movie_id', 'rating', 'timestamp'])

movies = pd.read_csv('ml-100k/u.item', sep='|', names=['movie_id', 'title'], usecols=[0, 1], encoding='latin-1')

ratings = pd.merge(ratings, movies, on='movie_id')

user_movie_matrix = ratings.pivot_table(index='user_id', columns='title', values='rating')

user_movie_matrix.fillna(0, inplace=True)

user_similarity = cosine_similarity(user_movie_matrix)
np.fill_diagonal(user_similarity, 0) 
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

def get_similar_users(user_id, num_users=5):
    similar_users = user_similarity_df.loc[user_id].sort_values(ascending=False)[:num_users]
    return similar_users
def get_movie_recommendations(user_id, num_recommendations=5):
    similar_users = get_similar_users(user_id)
    similar_users_ratings = user_movie_matrix.loc[similar_users.index]
    weighted_ratings = similar_users_ratings.T.dot(similar_users) / similar_users.sum()
    user_ratings = user_movie_matrix.loc[user_id]
    watched_movies = user_ratings[user_ratings > 0].index

    recommendations = weighted_ratings.drop(watched_movies).sort_values(ascending=False)[:num_recommendations]
    return recommendations
user_id = 1  
print(f"Top movie recommendations for User {user_id}:")
recommendations = get_movie_recommendations(user_id)
print(recommendations)
